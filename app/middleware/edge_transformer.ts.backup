import { Edge } from 'edge.js'
import { Source, Transformer, TransformContext } from 'html-validate'
import deasync from 'deasync'
import path from 'node:path'

// Initialize Edge renderer
const edge = Edge.create()
edge.mount('./resources/views') // Adjust to your views directory

// Mock or configure global helpers if needed
edge.global('route', (name: string) => `/mocked/${name}`)

/**
 * Synchronous wrapper for Edge rendering.
 * This uses `deasync` to make the async `edge.renderRaw()` function synchronous.
 */
function renderEdgeSync(
  templateName: string,
  source: Source
): { html: string; lineMapping: number[] } {
  let result = null
  let error = null

  // Perform asynchronous rendering with `renderRaw` to capture metadata
  edge
    .renderRaw(templateName, {}, { filename: source.filename })
    .then((output) => {
      result = {
        html: output.output, // Rendered HTML
        lineMapping: output.meta?.lineMapping || [], // Line mapping (if available)
      }
    })
    .catch((err) => {
      error = err
    })

  // Wait for the Promise to resolve
  while (result === null && error === null) {
    deasync.runLoopOnce()
  }

  if (error) {
    throw error
  }

  return result
}

/**
 * Transformer for `.edge` files.
 * Converts `.edge` templates to rendered HTML synchronously.
 */
function* edgeTransformer(this: TransformContext, source: Source): Iterable<Source> {
  try {
    // Extract the template name from the file path
    const templateName = path.basename(source.filename, '.edge')

    // Render the template synchronously
    const { html: renderedHtml, lineMapping } = renderEdgeSync(templateName, source)

    // If lineMapping is available, adjust error positions dynamically
    const startLine = lineMapping[0] || 1
    const startColumn = 1 // Edge templates typically start at column 1
    const startOffset = source.offset || 0

    // Yield the transformed source with accurate metadata
    yield {
      filename: source.filename,
      data: renderedHtml,
      line: startLine,
      column: startColumn,
      offset: startOffset,
      originalData: source.data, // Keep the original Edge content for reference
    }
  } catch (error) {
    console.error(`Error rendering Edge template: ${source.filename}`, error)
    throw error
  }
}

// Declare API version
edgeTransformer.api = 1
export default edgeTransformer as Transformer
